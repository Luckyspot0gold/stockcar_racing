<!DOCTYPE html>
<html lang="en">
<head>
    <meta charset="UTF-8">
    <meta name="viewport" content="width=device-width, initial-scale=1.0">
    <title>CryptoRacer - Market Racing Game</title>
    <link href="https://fonts.googleapis.com/css2?family=Orbitron:wght@400;700&family=Roboto:wght@300;400;700&display=swap" rel="stylesheet">
    <script src="https://cdn.jsdelivr.net/npm/chart.js"></script>
    <script src="https://cdn.ethers.io/lib/ethers-5.2.umd.min.js" type="application/javascript"></script>
    <style>
        :root {
            --primary: #6a11cb;
            --secondary: #2575fc;
            --accent: #00d2ff;
            --dark: #1a1a2e;
            --darker: #0d0d1a;
            --light: #f0f0f0;
            --success: #00c853;
            --danger: #ff1744;
            --warning: #ffc107;
        }
        
        * {
            margin: 0;
            padding: 0;
            box-sizing: border-box;
        }
        
        body {
            font-family: 'Roboto', sans-serif;
            background: linear-gradient(135deg, var(--darker), var(--dark));
            color: var(--light);
            min-height: 100vh;
            overflow-x: hidden;
        }
        
        .container {
            max-width: 1400px;
            margin: 0 auto;
            padding: 20px;
        }
        
        header {
            display: flex;
            justify-content: space-between;
            align-items: center;
            padding: 20px 0;
            border-bottom: 1px solid rgba(255,255,255,0.1);
            margin-bottom: 30px;
        }
        
        .logo {
            font-family: 'Orbitron', sans-serif;
            font-size: 2.2rem;
            background: linear-gradient(to right, var(--accent), var(--secondary));
            -webkit-background-clip: text;
            background-clip: text;
            -webkit-text-fill-color: transparent;
            text-shadow: 0 0 15px rgba(0, 210, 255, 0.5);
        }
        
        .wallet-section {
            display: flex;
            align-items: center;
            gap: 15px;
        }
        
        #connectWallet {
            background: linear-gradient(to right, var(--primary), var(--secondary));
            border: none;
            color: white;
            padding: 12px 25px;
            border-radius: 50px;
            font-family: 'Orbitron', sans-serif;
            cursor: pointer;
            transition: all 0.3s ease;
            box-shadow: 0 5px 15px rgba(0,0,0,0.3);
        }
        
        #connectWallet:hover {
            transform: translateY(-3px);
            box-shadow: 0 8px 20px rgba(0,0,0,0.4);
        }
        
        #walletInfo {
            display: none;
            background: rgba(255,255,255,0.1);
            padding: 10px 20px;
            border-radius: 50px;
            font-size: 0.9rem;
        }
        
        .main-content {
            display: grid;
            grid-template-columns: 1fr 350px;
            gap: 30px;
        }
        
        .game-container {
            background: rgba(30, 30, 46, 0.7);
            border-radius: 20px;
            padding: 25px;
            box-shadow: 0 10px 30px rgba(0,0,0,0.3);
            backdrop-filter: blur(10px);
            border: 1px solid rgba(255,255,255,0.1);
        }
        
        .track {
            height: 500px;
            background: rgba(10, 10, 20, 0.6);
            border-radius: 15px;
            margin-bottom: 20px;
            position: relative;
            overflow: hidden;
            border: 2px solid rgba(255,255,255,0.08);
        }
        
        .finish-line {
            position: absolute;
            right: 50px;
            top: 0;
            bottom: 0;
            width: 8px;
            background: repeating-linear-gradient(
                45deg,
                var(--light),
                var(--light) 10px,
                var(--danger) 10px,
                var(--danger) 20px
            );
            z-index: 10;
        }
        
        .car {
            position: absolute;
            width: 80px;
            height: 40px;
            border-radius: 8px;
            display: flex;
            align-items: center;
            justify-content: center;
            font-weight: bold;
            font-size: 1.1rem;
            color: white;
            text-shadow: 1px 1px 2px rgba(0,0,0,0.7);
            transition: left 1s linear;
            z-index: 5;
        }
        
        .car-info {
            position: absolute;
            top: -30px;
            left: 0;
            width: 100%;
            text-align: center;
            font-size: 0.8rem;
            background: rgba(0,0,0,0.5);
            padding: 3px;
            border-radius: 5px;
        }
        
        .controls {
            display: grid;
            grid-template-columns: 1fr 1fr;
            gap: 20px;
            margin-top: 25px;
        }
        
        .panel {
            background: rgba(30, 30, 46, 0.7);
            border-radius: 20px;
            padding: 25px;
            box-shadow: 0 10px 30px rgba(0,0,0,0.3);
            backdrop-filter: blur(10px);
            border: 1px solid rgba(255,255,255,0.1);
        }
        
        h2 {
            font-family: 'Orbitron', sans-serif;
            margin-bottom: 20px;
            color: var(--accent);
            font-size: 1.5rem;
        }
        
        .coins-grid {
            display: grid;
            grid-template-columns: repeat(auto-fill, minmax(100px, 1fr));
            gap: 15px;
            margin-bottom: 25px;
        }
        
        .coin-card {
            background: rgba(255,255,255,0.05);
            border-radius: 12px;
            padding: 15px 10px;
            text-align: center;
            cursor: pointer;
            transition: all 0.3s ease;
            border: 1px solid transparent;
        }
        
        .coin-card:hover, .coin-card.active {
            background: rgba(37, 117, 252, 0.2);
            border-color: var(--secondary);
            transform: translateY(-5px);
        }
        
        .coin-symbol {
            font-weight: bold;
            font-size: 1.2rem;
            margin-bottom: 5px;
        }
        
        .coin-price {
            font-size: 0.9rem;
            color: var(--accent);
        }
        
        .coin-change {
            font-size: 0.8rem;
            margin-top: 5px;
        }
        
        .change-up {
            color: var(--success);
        }
        
        .change-down {
            color: var(--danger);
        }
        
        .indicator-selector {
            margin: 20px 0;
        }
        
        .indicator-option {
            display: flex;
            align-items: center;
            margin-bottom: 12px;
            padding: 10px;
            background: rgba(255,255,255,0.05);
            border-radius: 10px;
            cursor: pointer;
        }
        
        .indicator-option input {
            margin-right: 10px;
        }
        
        .betting-section {
            margin-top: 25px;
        }
        
        .bet-controls {
            display: flex;
            gap: 10px;
            margin-top: 15px;
        }
        
        #betAmount {
            flex: 1;
            padding: 12px;
            border-radius: 10px;
            background: rgba(255,255,255,0.07);
            border: 1px solid rgba(255,255,255,0.1);
            color: white;
        }
        
        #placeBet {
            background: linear-gradient(to right, var(--success), #00a152);
            border: none;
            color: white;
            padding: 12px 20px;
            border-radius: 10px;
            cursor: pointer;
            font-family: 'Orbitron', sans-serif;
        }
        
        .chart-container {
            height: 300px;
            margin-top: 20px;
        }
        
        .educational-content {
            margin-top: 25px;
            padding: 15px;
            background: rgba(0,0,0,0.2);
            border-radius: 10px;
            font-size: 0.9rem;
            line-height: 1.6;
        }
        
        .educational-content h3 {
            color: var(--accent);
            margin-bottom: 10px;
            font-family: 'Orbitron', sans-serif;
        }
        
        footer {
            text-align: center;
            padding: 30px 0;
            margin-top: 40px;
            border-top: 1px solid rgba(255,255,255,0.1);
            font-size: 0.9rem;
            color: rgba(255,255,255,0.6);
        }
        
        /* Crypto car colors */
        .btc { background: linear-gradient(135deg, #F7931A, #8B4000); }
        .eth { background: linear-gradient(135deg, #3C3C3D, #627EEA); }
        .sol { background: linear-gradient(135deg, #00FFA3, #03E1FF); }
        .avax { background: linear-gradient(135deg, #E84142, #8B0000); }
        .ltc { background: linear-gradient(135deg, #BEBEBE, #6C6C6C); }
        .xrp { background: linear-gradient(135deg, #23292F, #3A7BC8); }
        .doge { background: linear-gradient(135deg, #C2A633, #796C1D); }
        .link { background: linear-gradient(135deg, #2A5ADA, #3255B8); }
    </style>
</head>
<body>
    <div class="container">
        <header>
            <div class="logo">CRYPTORACER</div>
            <div class="wallet-section">
                <button id="connectWallet">CONNECT WALLET</button>
                <div id="walletInfo">Connected: 0x...1234</div>
            </div>
        </header>
        
        <div class="main-content">
            <div class="game-container">
                <h2>CRYPTO RACE TRACK</h2>
                <div class="track" id="raceTrack">
                    <div class="finish-line"></div>
                    <!-- Cars will be injected here -->
                </div>
                
                <div class="controls">
                    <div>
                        <button id="startRace">START RACE</button>
                        <button id="resetRace">RESET RACE</button>
                    </div>
                    <div>
                        <button id="speed1x">1x SPEED</button>
                        <button id="speed2x">2x SPEED</button>
                    </div>
                </div>
            </div>
            
            <div class="panel">
                <h2>CRYPTO SELECTION</h2>
                <div class="coins-grid" id="coinsGrid">
                    <!-- Crypto cards will be injected here -->
                </div>
                
                <div class="indicator-selector">
                    <h2>MARKET INDICATORS</h2>
                    <div class="indicator-option">
                        <input type="checkbox" id="priceChange" checked>
                        <label for="priceChange">Price Change (1% = 10px movement)</label>
                    </div>
                    <div class="indicator-option">
                        <input type="checkbox" id="tradingVolume">
                        <label for="tradingVolume">Trading Volume (High volume = speed boost)</label>
                    </div>
                    <div class="indicator-option">
                        <input type="checkbox" id="marketSentiment">
                        <label for="marketSentiment">Market Sentiment (Positive = acceleration)</label>
                    </div>
                </div>
                
                <div class="chart-container">
                    <canvas id="marketChart"></canvas>
                </div>
                
                <div class="betting-section">
                    <h2>PLACE YOUR BET</h2>
                    <div class="bet-controls">
                        <select id="betCoin">
                            <option value="BTC">Bitcoin (BTC)</option>
                            <option value="ETH">Ethereum (ETH)</option>
                            <option value="SOL">Solana (SOL)</option>
                            <option value="AVAX">Avalanche (AVAX)</option>
                        </select>
                        <input type="number" id="betAmount" placeholder="Bet amount" min="1" value="10">
                        <button id="placeBet">BET NOW</button>
                    </div>
                </div>
                
                <div class="educational-content">
                    <h3>EDUCATIONAL SPOTLIGHT</h3>
                    <p>Candlestick patterns show market sentiment. A green candle indicates price increased during the period, while a red candle shows a price decrease. The wicks represent price extremes.</p>
                    <p>Volume indicators show trading activity. High volume during price increases confirms bullish sentiment, while high volume during declines confirms bearish sentiment.</p>
                </div>
            </div>
        </div>
        
        <footer>
            <p>CryptoRacer - Combining crypto education with competitive racing | Hackathon Submission</p>
            <p>Patent Pending - All game mechanics and branding are proprietary</p>
        </footer>
    </div>

    <script>
        // Crypto data model
        const cryptocurrencies = [
            { id: 'bitcoin', symbol: 'BTC', name: 'Bitcoin', price: 61234.78, change: 1.2, color: 'btc' },
            { id: 'ethereum', symbol: 'ETH', name: 'Ethereum', price: 3387.21, change: -0.5, color: 'eth' },
            { id: 'solana', symbol: 'SOL', name: 'Solana', price: 143.56, change: 3.7, color: 'sol' },
            { id: 'avalanche', symbol: 'AVAX', name: 'Avalanche', price: 35.89, change: 2.1, color: 'avax' },
            { id: 'litecoin', symbol: 'LTC', name: 'Litecoin', price: 84.32, change: -1.3, color: 'ltc' },
            { id: 'ripple', symbol: 'XRP', name: 'XRP', price: 0.54, change: 0.8, color: 'xrp' },
            { id: 'dogecoin', symbol: 'DOGE', name: 'Dogecoin', price: 0.12, change: 4.2, color: 'doge' },
            { id: 'chainlink', symbol: 'LINK', name: 'Chainlink', price: 17.89, change: 1.6, color: 'link' }
        ];

        // Game state
        const gameState = {
            isRacing: false,
            selectedCoin: 'bitcoin',
            speed: 1,
            cars: [],
            walletConnected: false,
            userBalance: 1000,
            bets: []
        };

        // DOM Elements
        const raceTrack = document.getElementById('raceTrack');
        const coinsGrid = document.getElementById('coinsGrid');
        const connectWalletBtn = document.getElementById('connectWallet');
        const walletInfo = document.getElementById('walletInfo');
        const startRaceBtn = document.getElementById('startRace');
        const resetRaceBtn = document.getElementById('resetRace');

        // Initialize game
        function initGame() {
            renderCryptoCards();
            createRaceCars();
            setupChart();
            setupEventListeners();
        }

        // Render crypto selection cards
        function renderCryptoCards() {
            coinsGrid.innerHTML = '';
            cryptocurrencies.forEach(coin => {
                const card = document.createElement('div');
                card.className = `coin-card ${gameState.selectedCoin === coin.id ? 'active' : ''}`;
                card.dataset.id = coin.id;
                
                card.innerHTML = `
                    <div class="coin-symbol">${coin.symbol}</div>
                    <div class="coin-price">$${coin.price.toLocaleString('en-US', {minimumFractionDigits: 2, maximumFractionDigits: 2})}</div>
                    <div class="coin-change ${coin.change > 0 ? 'change-up' : 'change-down'}">
                        ${coin.change > 0 ? '▲' : '▼'} ${Math.abs(coin.change)}%
                    </div>
                `;
                
                card.addEventListener('click', () => {
                    gameState.selectedCoin = coin.id;
                    document.querySelectorAll('.coin-card').forEach(c => c.classList.remove('active'));
                    card.classList.add('active');
                    updateChart(coin.symbol);
                });
                
                coinsGrid.appendChild(card);
            });
        }

        // Create race cars
        function createRaceCars() {
            raceTrack.innerHTML = '<div class="finish-line"></div>';
            cryptocurrencies.slice(0, 4).forEach((coin, index) => {
                const car = document.createElement('div');
                car.className = `car ${coin.color}`;
                car.id = `car-${coin.id}`;
                car.style.top = `${60 + index * 100}px`;
                car.style.left = '20px';
                
                car.innerHTML = `
                    ${coin.symbol}
                    <div class="car-info">${coin.name}</div>
                `;
                
                raceTrack.appendChild(car);
                gameState.cars.push({
                    id: coin.id,
                    element: car,
                    position: 20,
                    speed: 0,
                    lastPrice: coin.price
                });
            });
        }

        // Setup market chart
        function setupChart() {
            const ctx = document.getElementById('marketChart').getContext('2d');
            const chart = new Chart(ctx, {
                type: 'line',
                data: {
                    labels: Array.from({length: 20}, (_, i) => i + 1),
                    datasets: [{
                        label: 'BTC/USD',
                        data: Array.from({length: 20}, () => Math.random() * 1000 + 60000),
                        borderColor: '#00d2ff',
                        backgroundColor: 'rgba(0, 210, 255, 0.1)',
                        borderWidth: 2,
                        tension: 0.4,
                        fill: true
                    }]
                },
                options: {
                    responsive: true,
                    maintainAspectRatio: false,
                    plugins: {
                        legend: {
                            labels: {
                                color: 'rgba(255, 255, 255, 0.7)'
                            }
                        }
                    },
                    scales: {
                        y: {
                            grid: {
                                color: 'rgba(255, 255, 255, 0.1)'
                            },
                            ticks: {
                                color: 'rgba(255, 255, 255, 0.7)'
                            }
                        },
                        x: {
                            grid: {
                                color: 'rgba(255, 255, 255, 0.1)'
                            },
                            ticks: {
                                color: 'rgba(255, 255, 255, 0.7)'
                            }
                        }
                    }
                }
            });
        }

        // Update chart for selected coin
        function updateChart(coinSymbol) {
            // In a real app, this would fetch real market data
            console.log(`Updating chart for ${coinSymbol}`);
        }

        // Setup event listeners
        function setupEventListeners() {
            connectWalletBtn.addEventListener('click', connectWallet);
            startRaceBtn.addEventListener('click', startRace);
            resetRaceBtn.addEventListener('click', resetRace);
            document.getElementById('placeBet').addEventListener('click', placeBet);
            document.getElementById('speed1x').addEventListener('click', () => setSpeed(1));
            document.getElementById('speed2x').addEventListener('click', () => setSpeed(2));
        }

        // Connect wallet function
        async function connectWallet() {
            try {
                if (window.ethereum) {
                    const provider = new ethers.providers.Web3Provider(window.ethereum);
                    await provider.send("eth_requestAccounts", []);
                    const signer = provider.getSigner();
                    const address = await signer.getAddress();
                    
                    walletInfo.textContent = `Connected: ${address.substring(0, 6)}...${address.substring(38)}`;
                    walletInfo.style.display = 'block';
                    connectWalletBtn.textContent = 'WALLET CONNECTED';
                    gameState.walletConnected = true;
                    
                    // Simulate balance check
                    gameState.userBalance = 1845.32;
                } else {
                    alert('Please install MetaMask or another Ethereum wallet');
                }
            } catch (error) {
                console.error('Error connecting wallet:', error);
                alert('Error connecting wallet. See console for details.');
            }
        }

        // Start the race
        function startRace() {
            if (gameState.isRacing) return;
            
            gameState.isRacing = true;
            startRaceBtn.textContent = 'RACING...';
            startRaceBtn.disabled = true;
            
            // Simulate market movements affecting car positions
            const raceInterval = setInterval(() => {
                if (!gameState.isRacing) {
                    clearInterval(raceInterval);
                    return;
                }
                
                gameState.cars.forEach(car => {
                    const crypto = cryptocurrencies.find(c => c.id === car.id);
                    if (crypto) {
                        // Simulate price change
                        const change = (Math.random() - 0.5) * 2;
                        crypto.change = change;
                        crypto.price += change * crypto.price / 100;
                        
                        // Update car position based on market performance
                        const movement = change * 10 * gameState.speed;
                        car.position = Math.min(Math.max(car.position + movement, 20), window.innerWidth - 200);
                        car.element.style.left = `${car.position}px`;
                        
                        // Check for winner
                        if (car.position >= window.innerWidth - 250) {
                            endRace(car.id);
                        }
                    }
                });
                
                // Update crypto cards display
                renderCryptoCards();
            }, 500);
        }

        // End the race
        function endRace(winnerId) {
            gameState.isRacing = false;
            startRaceBtn.textContent = 'START RACE';
            startRaceBtn.disabled = false;
            
            const winner = cryptocurrencies.find(c => c.id === winnerId);
            if (winner) {
                alert(`Race finished! ${winner.name} (${winner.symbol}) wins!`);
                
                // Process bets
                gameState.bets.forEach(bet => {
                    if (bet.coin === winner.symbol) {
                        const winnings = bet.amount * 2;
                        gameState.userBalance += winnings;
                        alert(`You won ${winnings.toFixed(2)} on ${bet.coin}!`);
                    }
                });
                gameState.bets = [];
            }
        }

        // Reset the race
        function resetRace() {
            gameState.isRacing = false;
            startRaceBtn.textContent = 'START RACE';
            startRaceBtn.disabled = false;
            
            gameState.cars.forEach(car => {
                car.position = 20;
                car.element.style.left = '20px';
            });
        }

        // Set game speed
        function setSpeed(speed) {
            gameState.speed = speed;
            document.getElementById('speed1x').style.opacity = speed === 1 ? '1': '0.6';
            document.getElementById('speed2x').style.opacity = speed === 2 ? '1': '0.6';
        }

        // Place a bet
        function placeBet() {
            if (!gameState.walletConnected) {
                alert('Please connect your wallet first');
                return;
            }
            
            const coin = document.getElementById('betCoin').value;
            const amount = parseFloat(document.getElementById('betAmount').value);
            
            if (isNaN(amount) || amount <= 0) {
                alert('Please enter a valid bet amount');
                return;
            }
            
            if (amount > gameState.userBalance) {
                alert('Insufficient balance');
                return;
            }
            
            gameState.userBalance -= amount;
            gameState.bets.push({ coin, amount });
            alert(`Bet placed: ${amount} on ${coin}`);
        }

        // Initialize the game when the page loads
        window.addEventListener('load', initGame);
    </script>
</body>
</html>
from venice_ai import IPScrubber
scrubber = IPScrubber(patent="WV2025-1")
scrubber.clean_repo()  # Removes unlicensed assets
# RUN IN REPOSITORY ROOT
echo "🔥 Verifying Project Structure..."
if [ ! -d "src/game_engine" ]; then
    echo "CRITICAL: Engine directory missing! Reinitializing..."
    mkdir -p src/game_engine
    curl -o src/game_engine/core.py https://stoneverse.tech/racing_engine_stub.py
fi

pip install -U pygame pandas ccxt websockets numpy  # Force dependency refresh

echo "🚦 Launching Diagnostic Test..."
python test_engine.py  # Run the test script from the previous protocol
# Run these commands in your project root:
git rm -cached -r.  # Reset tracking
git reset HEAD-- hard  # Wipe local changes
git pull origin main   # Sync with GitHub
rm -rf .git/index.lock # Remove lockfiles
